import re
from typing import Optional
from black import format_str, FileMode, InvalidInput
import logging

from codestral_ros2_gen import logger_main

logger = logging.getLogger(f"{logger_main}.{__name__.split('.')[-1]}")


class ROS2CodeParser:
    """Generic parser for ROS2 Python code generated by AI models."""

    @staticmethod
    def parse(response: str) -> Optional[str]:
        """
        Parse model response: extract and format code only from code blocks with ```python markers.
        Returns formatted code or None if formatting fails, markers are absent, or block is empty.

        Args:
            response: Raw model response

        Returns:
            Optional[str]: Formatted Python code or None if parsing failed.
        """
        logger.debug(f"Parsing response: {response!r}")
        # Extract code from code blocks with "```python" at start and "```" at end.
        pattern = r"```python\s*\n(.*?)```"
        match = re.search(pattern, response, re.DOTALL)

        if match:
            code = match.group(1).strip()
            # Check for empty block
            if not code:
                logger.warning("Empty '```python' code block found in response")
                return None
            logger.debug(f"Found markers, extracted code:\n{code}")
        else:
            logger.warning("No valid '```python' code markers found in response")
            return None

        # Format code
        try:
            formatted_code = format_str(code, mode=FileMode())
            # to be able to run in ros2 to avoid OSError: [Errno 8] Exec format error:
            if not formatted_code.startswith("#!/usr/bin"):
                formatted_code = "#!/usr/bin/env python3\n" + formatted_code

            logger.debug(f"Formatted code:\n{formatted_code}")
            return formatted_code
        except InvalidInput as e:
            logger.error(f"Invalid input for code formatting: {e}")
            return None
        except Exception as e:
            logger.error(f"Error formatting code: {e}")
            return None
