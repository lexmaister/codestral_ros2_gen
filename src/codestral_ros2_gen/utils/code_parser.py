import re
from typing import Optional
from black import format_str, FileMode, InvalidInput


class ROS2CodeParser:
    """Generic parser for ROS2 Python code generated by AI models."""

    @staticmethod
    def parse(response: str) -> Optional[str]:
        """
        Parse model response: extract code and format it.
        Returns formatted code or None if parsing/formatting fails.

        Args:
            response: Raw response from the model

        Returns:
            Optional[str]: Formatted Python code or None if parsing failed
        """
        # Extract code from code blocks (supports both markdown and [PYTHON] tags)
        pattern = r"(?:`{3}\w*|\[PYTHON\])\n(.+?)(?:`{3}|\[\/PYTHON\])"
        match = re.search(pattern, response, re.DOTALL)

        if match:
            code = match.group(1).strip()
        else:
            # If no code blocks found and response looks like Python code, use as is
            if (
                "```" not in response
                and "[PYTHON]" not in response
                and any(keyword in response for keyword in ["import", "class", "def"])
            ):
                code = response.strip()
            else:
                return None

        # Format code
        try:
            return format_str(code, mode=FileMode())
        except (InvalidInput, Exception):
            return None
