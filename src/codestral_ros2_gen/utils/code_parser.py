import re
from typing import Optional
from black import format_str, FileMode, InvalidInput
import logging

from codestral_ros2_gen import logger_main

logger = logging.getLogger(f"{logger_main}.{__name__.split('.')[-1]}")


class ROS2CodeParser:
    """Generic parser for ROS2 Python code generated by AI models."""

    @staticmethod
    def parse(response: str) -> Optional[str]:
        """
        Parse model response: extract code and format it.
        Returns formatted code or None if parsing/formatting fails.

        Args:
            response: Raw response from the model

        Returns:
            Optional[str]: Formatted Python code or None if parsing failed
        """
        logger.debug(f"Parsing response: {response!r}")
        # Extract code from code blocks (supports both markdown and [PYTHON] tags)
        pattern = r"(?:`{3}\w*|\[PYTHON\])\n(.+?)(?:`{3}|\[\/PYTHON\])"
        match = re.search(pattern, response, re.DOTALL)

        if match:
            code = match.group(1).strip()
            logger.debug(f"Found markers, extracted code:\n{code}")
        else:
            # If no code blocks found and response looks like Python code, use as is
            if (
                "```" not in response
                and "[PYTHON]" not in response
                and any(keyword in response for keyword in ["import", "class", "def"])
            ):
                code = response.strip()
                logger.debug(f"No markers found, using response as is:\n{code}")
            else:
                logger.warning("No code found in response")
                return None

        # Format code
        try:
            formatted_code = format_str(code, mode=FileMode())
            logger.debug(f"Formatted code:\n{formatted_code}")
            return formatted_code
        except InvalidInput as e:
            logger.error(f"Invalid input for code formatting: {e}")
            return None
        except Exception as e:
            logger.error(f"Error formatting code: {e}")
            return None
