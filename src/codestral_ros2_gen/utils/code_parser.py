import re
from typing import Optional
from black import format_str, FileMode, InvalidInput
import logging

from codestral_ros2_gen import logger_main

logger = logging.getLogger(f"{logger_main}.{__name__.split('.')[-1]}")


class ROS2CodeParser:
    """
    Generic parser for ROS2 Python code generated by AI models.

    This class provides a method to parse and format Python code extracted from
    code blocks marked as python code in a model's response. It ensures the code
    is properly formatted and includes the necessary shebang line for ROS2
    compatibility.

    Attributes:
        None

    Methods:
        parse(response: str) -> Optional[str]:
            Parse model response: extract and format code only from code blocks that
            marked as python code.
    """

    @staticmethod
    def parse(response: str) -> Optional[str]:
        """
        Parse model response: extract and format code only from code blocks with python code markers.

        This method extracts Python code from a response string that is marked
        with python code marker at the start. It then formats the
        extracted code using the Black code formatter and ensures it includes
        the necessary shebang line for ROS2 compatibility.

        Args:
            response (str): Raw model response containing code blocks.

        Returns:
            Optional[str]: Formatted Python code or None if parsing or formatting fails.

        Raises:
            None

        Examples:
            >>> parser = ROS2CodeParser()
            >>> response = \"\"\"Here is some text with a code block:
            ... ```python
            ... def example_function():
            ...     print('Hello, world!')
            ... ```
            ... \"\"\"
            >>> parser.parse(response)
            \'#!/usr/bin/env python3
            def example_function():
                print(\"Hello, world!\")\'
        """
        logger.debug(f"Parsing response: {response!r}")
        # Extract code from code blocks with "```python" at start and "```" at end.
        pattern = r"```python\s*\n(.*?)```"
        match = re.search(pattern, response, re.DOTALL)

        if match:
            code = match.group(1).strip()
            # Check for empty block
            if not code:
                logger.warning("Empty '```python' code block found in response")
                return None
            logger.debug(f"Found markers, extracted code:\n{code}")
        else:
            logger.warning("No valid '```python' code markers found in response")
            return None

        # Format code
        try:
            formatted_code = format_str(code, mode=FileMode())
            # to be able to run in ros2 to avoid OSError: [Errno 8] Exec format error:
            if not formatted_code.startswith("#!/usr/bin"):
                formatted_code = "#!/usr/bin/env python3\n" + formatted_code

            logger.debug(f"Formatted code:\n{formatted_code}")
            return formatted_code
        except InvalidInput as e:
            logger.error(f"Invalid input for code formatting: {e}")
            return None
        except Exception as e:
            logger.error(f"Error formatting code: {e}")
            return None
